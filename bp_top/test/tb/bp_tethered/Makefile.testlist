
# These test requires more dromajo emulation
# domain_fault
# uncached_mode
# These test should be run with L1 AMOs
#  amo_nonblocking
#  amo_interrupt
#  These tests are expected to fail
#  unhandled_trap
#  These tests dont work on all configs
#  aviary_rom
#  This test fails spuriously because it assumes IALIGN=32
#  epc
MISC_TESTS := \
  hello_world           \
  cache_hammer          \
  jalr_illegal          \
  satp_nofence          \
  timer_interrupt       \
  loop                  \
  cache_flush           \
  stream_hammer         \
  eaddr_fault           \
  paging                \
  mapping               \
  mstatus_fs            \
  wfi                   \
  divide_hazard         \
  readonly              \
  virtual               \
  constructor           \
  template              \
  unwinding             \
  vector                \
  map                   \
  nanboxing             \

MISC_TESTLIST := $(addprefix bp-tests@, $(MISC_TESTS))

MISALIGNED_TESTS := \
  misaligned_instructions_basic_jumps \
  misaligned_instructions_advanced_jumps \
  misaligned_instructions_virtual_memory \

MISALIGNED_TESTLIST := $(addprefix bp-tests@, $(MISALIGNED_TESTS))

RV64_P_ISA_TESTS := \
  rv64ui-p-add     \
  rv64ui-p-addi    \
  rv64ui-p-addiw   \
  rv64ui-p-addw    \
  rv64ui-p-and     \
  rv64ui-p-andi    \
  rv64ui-p-auipc   \
  rv64ui-p-beq     \
  rv64ui-p-bge     \
  rv64ui-p-bgeu    \
  rv64ui-p-blt     \
  rv64ui-p-bltu    \
  rv64ui-p-bne     \
  rv64ui-p-fence_i \
  rv64ui-p-jal     \
  rv64ui-p-jalr    \
  rv64ui-p-lb      \
  rv64ui-p-lbu     \
  rv64ui-p-lh      \
  rv64ui-p-lhu     \
  rv64ui-p-lw      \
  rv64ui-p-lwu     \
  rv64ui-p-ld      \
  rv64ui-p-lui     \
  rv64ui-p-or      \
  rv64ui-p-ori     \
  rv64ui-p-sb      \
  rv64ui-p-sh      \
  rv64ui-p-sw      \
  rv64ui-p-sd      \
  rv64ui-p-simple  \
  rv64ui-p-sll     \
  rv64ui-p-slli    \
  rv64ui-p-slliw   \
  rv64ui-p-sllw    \
  rv64ui-p-slt     \
  rv64ui-p-slti    \
  rv64ui-p-sltiu   \
  rv64ui-p-sltu    \
  rv64ui-p-sra     \
  rv64ui-p-srai    \
  rv64ui-p-sraiw   \
  rv64ui-p-sraw    \
  rv64ui-p-srl     \
  rv64ui-p-srli    \
  rv64ui-p-srliw   \
  rv64ui-p-srlw    \
  rv64ui-p-sub     \
  rv64ui-p-subw    \
  rv64ui-p-xor     \
  rv64ui-p-xori    \
                   \
  rv64ua-p-amoadd_d  \
  rv64ua-p-amoadd_w  \
  rv64ua-p-amoand_d  \
  rv64ua-p-amoand_w  \
  rv64ua-p-amomax_d  \
  rv64ua-p-amomax_w  \
  rv64ua-p-amomaxu_w \
  rv64ua-p-amomaxu_d \
  rv64ua-p-amomin_d  \
  rv64ua-p-amomin_w  \
  rv64ua-p-amominu_w \
  rv64ua-p-amominu_d \
  rv64ua-p-amoor_d   \
  rv64ua-p-amoor_w   \
  rv64ua-p-amoswap_d \
  rv64ua-p-amoswap_w \
  rv64ua-p-amoxor_d  \
  rv64ua-p-amoxor_w  \
  rv64ua-p-lrsc      \
                     \
  rv64um-p-mul       \
  rv64um-p-mulh      \
  rv64um-p-mulhsu    \
  rv64um-p-mulhu     \
  rv64um-p-mulw      \
  rv64um-p-div       \
  rv64um-p-divu      \
  rv64um-p-divuw     \
  rv64um-p-divw      \
  rv64um-p-rem       \
  rv64um-p-remu      \
  rv64um-p-remuw     \
  rv64um-p-remw      \
                     \
  rv64uf-p-fadd      \
  rv64uf-p-fclass    \
  rv64uf-p-fcmp      \
  rv64uf-p-fcvt      \
  rv64uf-p-fcvt_w    \
  rv64uf-p-fdiv      \
  rv64uf-p-fmadd     \
  rv64uf-p-fmin      \
  rv64uf-p-ldst      \
  rv64uf-p-move      \
  rv64uf-p-recoding  \
                     \
  rv64ud-p-fadd      \
  rv64ud-p-fclass    \
  rv64ud-p-fcmp      \
  rv64ud-p-fcvt      \
  rv64ud-p-fcvt_w    \
  rv64ud-p-fdiv      \
  rv64ud-p-fmadd     \
  rv64ud-p-fmin      \
  rv64ud-p-ldst      \
  rv64ud-p-move      \
  rv64ud-p-structural

RV64_P_ISA_TESTLIST := $(addprefix riscv-tests@, $(RV64_P_ISA_TESTS))

RV64_V_ISA_TESTS := \
  rv64ui-v-add     \
  rv64ui-v-addi    \
  rv64ui-v-addiw   \
  rv64ui-v-addw    \
  rv64ui-v-and     \
  rv64ui-v-andi    \
  rv64ui-v-auipc   \
  rv64ui-v-beq     \
  rv64ui-v-bge     \
  rv64ui-v-bgeu    \
  rv64ui-v-blt     \
  rv64ui-v-bltu    \
  rv64ui-v-bne     \
  rv64ui-v-jal     \
  rv64ui-v-jalr    \
  rv64ui-v-lb      \
  rv64ui-v-lbu     \
  rv64ui-v-lh      \
  rv64ui-v-lhu     \
  rv64ui-v-lw      \
  rv64ui-v-lwu     \
  rv64ui-v-ld      \
  rv64ui-v-lui     \
  rv64ui-v-or      \
  rv64ui-v-ori     \
  rv64ui-v-sb      \
  rv64ui-v-sh      \
  rv64ui-v-sw      \
  rv64ui-v-sd      \
  rv64ui-v-sll     \
  rv64ui-v-slli    \
  rv64ui-v-slliw   \
  rv64ui-v-sllw    \
  rv64ui-v-slt     \
  rv64ui-v-slti    \
  rv64ui-v-sltiu   \
  rv64ui-v-sltu    \
  rv64ui-v-sra     \
  rv64ui-v-srai    \
  rv64ui-v-sraiw   \
  rv64ui-v-sraw    \
  rv64ui-v-srl     \
  rv64ui-v-srli    \
  rv64ui-v-srliw   \
  rv64ui-v-srlw    \
  rv64ui-v-sub     \
  rv64ui-v-subw    \
  rv64ui-v-xor     \
  rv64ui-v-xori    \
  rv64ua-v-amoadd_d  \
  rv64ua-v-amoadd_w  \
  rv64ua-v-amoand_d  \
  rv64ua-v-amoand_w  \
  rv64ua-v-amomax_d  \
  rv64ua-v-amomax_w  \
  rv64ua-v-amomaxu_w \
  rv64ua-v-amomaxu_d \
  rv64ua-v-amomin_d  \
  rv64ua-v-amomin_w  \
  rv64ua-v-amominu_d \
  rv64ua-v-amominu_w \
  rv64ua-v-amoor_d   \
  rv64ua-v-amoor_w   \
  rv64ua-v-amoswap_d \
  rv64ua-v-amoswap_w \
  rv64ua-v-amoxor_d  \
  rv64ua-v-amoxor_w  \
  rv64ua-v-lrsc

RV64_V_ISA_TESTLIST := $(addprefix riscv-tests@, $(RV64_V_ISA_TESTS))

RV64_BENCHMARK_TESTS := \
  median   \
  multiply \
  qsort    \
  rsort    \
  towers   \
  vvadd    \
  dhrystone

RV64_BENCHMARK_TESTLIST := $(addprefix riscv-tests@, $(RV64_BENCHMARK_TESTS))

RISCV_TESTLIST := \
    $(RV64_P_ISA_TESTLIST) \
    $(RV64_V_ISA_TESTLIST) \
    $(RV64_BENCHMARK_TESTLIST)

COREMARK_TESTS := coremark

COREMARK_TESTLIST := $(addprefix coremark@, $(COREMARK_TESTS))

BEEBS_TESTS := \
  aha-compress \
  aha-mont64 \
  bs \
  bubblesort \
  cnt \
  compress \
  cover \
  crc \
  ctl-stack \
  ctl-vector \
  cubic \
  dijkstra \
  duff \
  edn \
  expint \
  fac \
  fasta \
  fdct \
  fibcall \
  fir \
  frac \
  huffbench \
  insertsort \
  janne_complex \
  jfdctint \
  lcdnum \
  levenshtein \
  matmult-int \
  mergesort \
  miniz \
  nbody \
  nettle-aes \
  nettle-arcfour \
  nettle-cast128 \
  nettle-des \
  nettle-md5 \
  newlib-exp \
  newlib-log \
  newlib-mod \
  newlib-sqrt \
  ns \
  picojpeg \
  prime \
  qrduino \
  qurt \
  recursion \
  select \
  sglib-arraybinsearch \
  sglib-arrayheapsort \
  sglib-arrayquicksort \
  sglib-dllist \
  sglib-hashtable \
  sglib-listinsertsort \
  sglib-listsort \
  sglib-queue \
  sglib-rbtree \
  slre \
  sqrt \
  statemate \
  stb_perlin \
  tarai \
  template \
  trio-snprintf \
  trio-sscanf \
  ud \
  wikisort \
  qsort \
  minver \
  whetstone \

#  Fail with GCC 12
#  ndes
#  nettle-sha256
#  nsichneu
#  stringsearch1
#  strstr
#  ludcmp
#  matmult-float

BEEBS_TESTLIST := $(addprefix beebs@, $(BEEBS_TESTS))

MC_TESTS := \
  mc_sanity_1 \
  mc_sanity_2 \
  mc_sanity_4 \
  mc_sanity_8 \
  mc_sanity_16 \
  mc_rand_walk_1 \
  mc_rand_walk_2 \
  mc_rand_walk_4 \
  mc_rand_walk_8 \
  mc_rand_walk_16 \
  mc_work_share_sort_1 \
  mc_work_share_sort_2 \
  mc_work_share_sort_4 \
  mc_work_share_sort_8 \
  mc_work_share_sort_16

MC_TESTLIST := $(addprefix bp-tests@, $(MC_TESTS))

RISCVDV_TESTS := \
  riscv_amo_test    \
  riscv_arithmetic_basic_test    \
  riscv_floating_point_arithmetic_test    \
  riscv_floating_point_mmu_stress_test    \
  riscv_floating_point_rand_test    \
  riscv_full_interrupt_test    \
  riscv_hint_instr_test    \
  riscv_illegal_instr_test    \
  riscv_invalid_csr_test    \
  riscv_jump_stress_test    \
  riscv_loop_test    \
  riscv_machine_mode_rand_test    \
  riscv_mmu_stress_test    \
  riscv_no_fence_test    \
  riscv_non_compressed_instr_test    \
  riscv_privileged_mode_rand_test    \
  riscv_rand_instr_test    \
  riscv_rand_jump_test    \
  riscv_sfence_exception_test    \
  riscv_unaligned_load_store_test

# TODO: Clean this up with a better generator
RISCVDV_TESTLIST  = $(addprefix riscv-dv@, $(addsuffix  _0, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _1, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _2, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _3, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _4, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _5, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _6, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _7, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _8, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix  _9, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _10, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _11, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _12, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _13, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _14, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _15, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _16, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _17, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _18, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscv-dv@, $(addsuffix _19, $(RISCVDV_TESTS)))

COMPLIANCE_TESTS := \
  add-01.S         \
  addi-01.S         \
  addiw-01.S         \
  addw-01.S         \
  amoadd.d-01.S         \
  amoadd.w-01.S         \
  amoand.d-01.S         \
  amoand.w-01.S         \
  amomax.d-01.S         \
  amomaxu.d-01.S         \
  amomaxu.w-01.S         \
  amomax.w-01.S         \
  amomin.d-01.S         \
  amominu.d-01.S         \
  amominu.w-01.S         \
  amomin.w-01.S         \
  amoor.d-01.S         \
  amoor.w-01.S         \
  amoswap.d-01.S         \
  amoswap.w-01.S         \
  amoxor.d-01.S         \
  amoxor.w-01.S         \
  and-01.S         \
  andi-01.S         \
  auipc-01.S         \
  beq-01.S         \
  bge-01.S         \
  bgeu-01.S         \
  blt-01.S         \
  bltu-01.S         \
  bne-01.S         \
  cadd-01.S         \
  caddi-01.S         \
  caddi16sp-01.S         \
  caddi4spn-01.S         \
  caddiw-01.S         \
  caddw-01.S         \
  cand-01.S         \
  candi-01.S         \
  cbeqz-01.S         \
  cbnez-01.S         \
  cebreak-01.S         \
  cj-01.S         \
  cjalr-01.S         \
  cjr-01.S         \
  cld-01.S         \
  cldsp-01.S         \
  cli-01.S         \
  clui-01.S         \
  clw-01.S         \
  clwsp-01.S         \
  cmv-01.S         \
  cnop-01.S         \
  cor-01.S         \
  csd-01.S         \
  csdsp-01.S         \
  cslli-01.S         \
  csrai-01.S         \
  csrli-01.S         \
  csub-01.S         \
  csubw-01.S         \
  csw-01.S         \
  cswsp-01.S         \
  cxor-01.S         \
  div-01.S         \
  divu-01.S         \
  divuw-01.S         \
  divw-01.S         \
  ebreak.S         \
  ecall.S         \
  fcvt.d.l_b25-01.S         \
  fcvt.d.l_b26-01.S         \
  fcvt.d.lu_b25-01.S         \
  fcvt.d.lu_b26-01.S         \
  fcvt.l.d_b1-01.S         \
  fcvt.l.d_b22-01.S         \
  fcvt.lu.d_b23-01.S         \
  fcvt.lu.d_b24-01.S         \
  fcvt.lu.d_b27-01.S         \
  fcvt.lu.d_b28-01.S         \
  fcvt.lu.d_b29-01.S         \
  fcvt.lu.s_b1-01.S         \
  fcvt.lu.s_b22-01.S         \
  fcvt.lu.s_b23-01.S         \
  fcvt.lu.s_b24-01.S         \
  fcvt.lu.s_b27-01.S         \
  fcvt.lu.s_b28-01.S         \
  fcvt.lu.s_b29-01.S         \
  fcvt.s.l_b25-01.S         \
  fcvt.s.l_b26-01.S         \
  fcvt.s.lu_b25-01.S         \
  fcvt.s.lu_b26-01.S         \
  fence-01.S         \
  Fencei.S         \
  fmv.d.x_b25-01.S         \
  fmv.d.x_b26-01.S         \
  fmv.x.d_b1-01.S         \
  fmv.x.d_b22-01.S         \
  fmv.x.d_b23-01.S         \
  fmv.x.d_b24-01.S         \
  fmv.x.d_b27-01.S         \
  fmv.x.d_b28-01.S         \
  fmv.x.d_b29-01.S         \
  jal-01.S         \
  jalr-01.S         \
  lb-align-01.S         \
  lbu-align-01.S         \
  ld-align-01.S         \
  lh-align-01.S         \
  lhu-align-01.S         \
  lui-01.S         \
  lw-align-01.S         \
  lwu-align-01.S         \
  misalign1-jalr-01.S         \
  misalign2-jalr-01.S         \
  misalign-beq-01.S         \
  misalign-bge-01.S         \
  misalign-bgeu-01.S         \
  misalign-blt-01.S         \
  misalign-bltu-01.S         \
  misalign-bne-01.S         \
  misalign-jal-01.S         \
  misalign-ld-01.S         \
  misalign-lh-01.S         \
  misalign-lhu-01.S         \
  misalign-lw-01.S         \
  misalign-lwu-01.S         \
  misalign-sd-01.S         \
  misalign-sh-01.S         \
  misalign-sw-01.S         \
  mul-01.S         \
  mulh-01.S         \
  mulhsu-01.S         \
  mulhu-01.S         \
  mulw-01.S         \
  or-01.S         \
  ori-01.S         \
  rem-01.S         \
  remu-01.S         \
  remuw-01.S         \
  remw-01.S         \
  sb-align-01.S         \
  sd-align-01.S         \
  sh-align-01.S         \
  sll-01.S         \
  slli-01.S         \
  slliw-01.S         \
  sllw-01.S         \
  slt-01.S         \
  slti-01.S         \
  sltiu-01.S         \
  sltu-01.S         \
  sra-01.S         \
  srai-01.S         \
  sraiw-01.S         \
  sraw-01.S         \
  srl-01.S         \
  srli-01.S         \
  srliw-01.S         \
  srlw-01.S         \
  sub-01.S         \
  subw-01.S         \
  sw-align-01.S         \
  xor-01.S         \
  xori-01.S

COMPLIANCE_TESTLIST := $(addprefix compliance@, $(COMPLIANCE_TESTS))

SPEC_TESTS := \
  177.mesa \
  188.ammp \
  183.equake \
  175.vpr \
  181.mcf \
  164.gzip \
  186.crafty \
  256.bzip2 \
  197.parser

SPEC_TESTLIST := $(addprefix spec@, $(SPEC_TESTS))

BASELINE_TESTLIST := \
  bp-tests@hello_world \
  beebs@bs \
  beebs@dijkstra \
  beebs@fibcall \
  beebs@frac \
  riscv-tests@median \
  riscv-tests@rv64ui-p-blt \
  beebs@sglib-arraybinsearch \
  riscv-tests@towers \
  riscv-tests@vvadd

TESTLIST ?=
run_testlist.%:
	$(MAKE) -j1 build.$*
	$(MAKE) $(addsuffix @$*, $(addprefix run_test@, $($(TESTLIST))))

# For example: run_test@beebs@frac@v
run_test@%:
	$(eval override SUITE := $(word 1,$(subst @,  ,$*)))
	$(eval override PROG  := $(word 2,$(subst @,  ,$*)))
	$(eval override TS    := $(word 3,$(subst @,  ,$*)))
	$(MAKE) sim.$(TS) SUITE=$(SUITE) PROG=$(PROG)

dromajo_dump:
	$(DROMAJO) $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).riscv --ncpus=$(NCPUS) \
		--checkpoint_period=$(SAMPLE_INSTR_P) --save=dromajo --memory_size=$(SAMPLE_MEMSIZE)

# Run an entire benchmark in parallel
# Important parameters:
#   SAMPLE_INSTR_P  - instructions per sample
#   SAMPLE_WARMUP_P - instructions to run for warmup, without statistics
#   SAMPLE_MEMSIZE  - RAM size of the sample (affects simulation startup time)
run_psample.%: dromajo_dump
	$(eval CHECKPOINTS := $(subst .mainram,,$(subst dromajo.,,$(shell ls dromajo.*.mainram))))
	rm dromajo.*
	$(MAKE) $(addsuffix @$*, $(addprefix run_sample@, $(CHECKPOINTS)))

# Special case 0, because we won't drop a checkpoint for it
run_sample@0%:
	$(eval override TS := $(word 1,$(subst @,  ,$*)))
	$(MAKE) -j1 build.$(TS) CHECKPOINT_P=0 NBF_CONFIG_P=1 TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)
	$(MAKE) sim.$(TS) TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)

# For example: run_sample@bp-tests@hello_world@60
run_sample@%:
	$(eval override SAMPLE_START_P  := $(word 1,$(subst @,  ,$*)))
	$(eval override TS              := $(word 2,$(subst @,  ,$*)))
	$(MAKE) -j1 build.$(TS) CHECKPOINT_P=1 NBF_CONFIG_P=1 TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)
	$(MAKE) sim_sample.$(TS) TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)

## Aliases
riscv_regress.%:
	$(MAKE) run_testlist.$* TESTLIST=RISCV_TESTLIST
beebs_regress.%:
	$(MAKE) run_testlist.$* TESTLIST=BEEBS_TESTLIST
